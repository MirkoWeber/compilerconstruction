// Grammatik Start

S -> PC ID PB 
PC -> keyword"Package" identifier
ID -> keyword"import" string | null
PB -> FD FD'
FD'-> FD | null
FD -> keyword"func" identifier '(' AG '{' ST
ST -> identifier '=' AE ST' | keyword"if" '(' LE ST' | identifier FC ST' | identifier VD | }
VD ->
ST'-> ST | }

LE -> ??


FC -> '.'identifier FC |  '(' AGC
AG -> identifierDecl AG' | ')' FT
AG'-> ',' AG | ')' FT
FT -> keyword = "int" | keyword = "bool" | null

AGC -> identifier AGC' | const AGC' | ')'
AGC'-> ',' AGC | ')'

AE -> TE AE'		//Taschenrechner Beispiel
AE'-> '+' TE AE' | null
TE -> FA TE'
TE'-> '*' FA TE' | null
FA -> '(' AE ')' | identifier | constant

// Grammatik Ende

// ////////////////////////////////////////////////nur für lexxer

string = "{letter | number}" 
identifier = letter { letter | number }
identifierDecl = identifier vType
identigierDeclFB = identifier ':=' 
tokens = ( | ) | ; | { | } | , | := | += | 


keywords
--------

package
import
func
do
while
for


PARSER, ToDo: 

implement FIRST and FOLLOW function

Table driven top down parsing Folie:
Stack auf Zeile ist das Resultat der Aktion auf der selben Zeile!


FOLLOW:
Merke, FOLLOW(B) += FOLLOW(A) heißt in seinem Pseudocode, schauen ob es schon drin ist, wenn ja dann nicht hinzufügen!

