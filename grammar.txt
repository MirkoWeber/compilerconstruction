// Grammatik Start

S -> PC ID PB | PC PB
PC -> keyword"Package" identifier
ID -> keyword"import" string
PB -> FD 
FD -> keyword"func" identifier '(' AG '{' ST '}'
ST -> identifier'='AE | keyword"if" '(' LE | identifier FC | ';'ST | null 

FC -> '.'identifier FC |  '(' AG 
AG -> identifier AG' | const AG' | ')'
AG' -> ',' AG 

AE -> TE AE'		//Taschenrechner Beispiel
AE' -> '+' TE AE' | null
TE -> FA TE'
TE' -> '*' FA TE' | null
FA -> '(' AE ')' | identifier | constant

// Grammatik Ende

// ////////////////////////////////////////////////nur für lexxer

string = "{letter | number}" 
identifier = letter { letter | number }
tokens = ( | ) | ; | { | }


keywords
--------

package
import
func

PARSER, ToDo: 

implement FIRST and FOLLOW function

Table driven top down parsing Folie:
Stack auf Zeile ist das Resultat der Aktion auf der selben Zeile!


FOLLOW:
Merke, FOLLOW(B) += FOLLOW(A) heißt in seinem Pseudocode, schauen ob es schon drin ist, wenn ja dann nicht hinzufügen!

